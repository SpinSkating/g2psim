      function txfit_r5p65_484816       (x,m)
      dimension x(m)
      dimension xmin(10),xmax(10),scale(10),xmean(10)
      dimension coeff(  4)
      data ncoeff/  3/
      data avdat/  0.7323850E-02/
      data xmin/
     1 -0.51754E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     2  0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00/
      data xmax/
     1  0.56093E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00,
     2  0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00/
      data scale /10*0./
      data coeff/
     + -0.32453546E-02, 0.93379676E-01,-0.99529012E-03,
     +      0.      /
      data ientry/0/
c
      if (ientry.ne.0) go to 10
      ientry=1
      do 5 i=1,m
      if (xmin(i).eq.xmax(i)) go to 5
      scale(i)=2./(xmax(i)-xmin(i))
   5  continue
c
  10  continue
c      normalize variables between -1 and +1
      x1 =1.+(x(  1)-xmax(  1))*scale(  1)
c          set up monomials   functions
      x11 = x1
      x12 = x11*x1
c
c                  function
c
      txfit_r5p65_484816       =avdat
     1  +coeff(  1)    
     2  +coeff(  2)*x11
     3  +coeff(  3)*x12
c
      return
      end
      function delta_r5p65_484816       (x,m)
      dimension x(m)
      dimension xmin(10),xmax(10),scale(10),xmean(10)
      dimension coeff( 96)
      data ncoeff/ 95/
      data avdat/  0.1882084E-02/
      data xmin/
     1 -0.70433E+00,-0.23360E-01,-0.57746E-01,-0.50136E-01,-0.14915E-01,
     2  0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00/
      data xmax/
     1  0.61389E+00, 0.21608E-01, 0.48093E-01, 0.28303E-01, 0.14999E-01,
     2  0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00/
      data scale /10*0./
      data coeff/
     + -0.50772959E-02, 0.48435140E-01, 0.39228601E-02, 0.35848790E-02,
     +  0.25316640E-02, 0.42983764E-02,-0.16233645E-02,-0.33970419E-02,
     +  0.64727594E-03,-0.14630265E-02, 0.23246580E-02,-0.23222445E-02,
     +  0.34623181E-02,-0.58549978E-02,-0.26788690E-04, 0.33151070E-03,
     +  0.39126578E-03,-0.36822056E-03, 0.55615109E-03, 0.12767361E-03,
     +  0.16157258E-02,-0.18568264E-02, 0.13410322E-02, 0.90025034E-03,
     +  0.10597868E-02, 0.13436505E-02, 0.19370981E-03, 0.85492752E-03,
     +  0.19957832E-03, 0.79614930E-02,-0.28245808E-02,-0.37409293E-02,
     + -0.57554720E-02, 0.20115613E-02, 0.72273398E-02,-0.32704328E-02,
     + -0.80580980E-03,-0.10306548E-02, 0.48420276E-03,-0.44724191E-04,
     +  0.28937685E-03, 0.28473472E-02,-0.62509667E-03,-0.16220029E-03,
     +  0.13664603E-03,-0.52244036E-03, 0.38048119E-03,-0.32888877E-03,
     + -0.33242846E-04,-0.20499538E-05, 0.22592804E-03,-0.61056623E-03,
     +  0.14778251E-02, 0.27635109E-04,-0.43455666E-03,-0.32975274E-03,
     + -0.14349584E-02,-0.28970711E-04, 0.59743961E-04,-0.13059819E-02,
     +  0.27431795E-03, 0.14792415E-02,-0.13178441E-03, 0.16261253E-03,
     +  0.13467935E-02,-0.40940632E-03,-0.47876567E-03, 0.54832275E-04,
     +  0.50719937E-04,-0.11500884E-02, 0.70724884E-04, 0.25761744E-03,
     +  0.10369938E-02,-0.39355285E-03,-0.35283706E-03, 0.15017661E-02,
     + -0.19280589E-02,-0.37388068E-02, 0.22425244E-02,-0.85780816E-03,
     +  0.20756671E-03, 0.73269103E-03,-0.51187014E-03, 0.45203642E-03,
     + -0.19814356E-02, 0.44888235E-03,-0.45422764E-03, 0.88705315E-03,
     +  0.48056641E-03, 0.22788266E-03,-0.98506070E-03, 0.37408422E-03,
     + -0.14001329E-02, 0.32939549E-03, 0.78099658E-03,
     +      0.      /
      data ientry/0/
c
      if (ientry.ne.0) go to 10
      ientry=1
      do 5 i=1,m
      if (xmin(i).eq.xmax(i)) go to 5
      scale(i)=2./(xmax(i)-xmin(i))
   5  continue
c
  10  continue
c      normalize variables between -1 and +1
      x1 =1.+(x(  1)-xmax(  1))*scale(  1)
      x2 =1.+(x(  2)-xmax(  2))*scale(  2)
      x3 =1.+(x(  3)-xmax(  3))*scale(  3)
      x4 =1.+(x(  4)-xmax(  4))*scale(  4)
      x5 =1.+(x(  5)-xmax(  5))*scale(  5)
c          set up monomials   functions
      x11 = x1
      x12 = x11*x1
      x13 = x12*x1
      x14 = x13*x1
      x21 = x2
      x22 = x21*x2
      x23 = x22*x2
      x24 = x23*x2
      x31 = x3
      x32 = x31*x3
      x33 = x32*x3
      x34 = x33*x3
      x41 = x4
      x42 = x41*x4
      x43 = x42*x4
      x51 = x5
      x52 = x51*x5
c
c                  function
c
      delta_r5p65_484816       =avdat
     1  +coeff(  1)                    
     2  +coeff(  2)*x11                
     3  +coeff(  3)*x12                
     4  +coeff(  4)*x11*x21            
     5  +coeff(  5)                *x51
     6  +coeff(  6)    *x21*x31        
     7  +coeff(  7)    *x22            
     8  +coeff(  8)    *x21    *x41    
      delta_r5p65_484816       =delta_r5p65_484816       
     9  +coeff(  9)    *x21        *x51
     1  +coeff( 10)        *x31    *x51
     2  +coeff( 11)        *x32        
     3  +coeff( 12)        *x31*x41    
     4  +coeff( 13)    *x22*x31        
     5  +coeff( 14)    *x21*x32        
     6  +coeff( 15)*x14*x21            
     7  +coeff( 16)    *x21        *x52
     8  +coeff( 17)    *x21            
      delta_r5p65_484816       =delta_r5p65_484816       
     9  +coeff( 18)        *x31        
     1  +coeff( 19)            *x42    
     2  +coeff( 20)*x11*x22            
     3  +coeff( 21)*x11*x21*x31        
     4  +coeff( 22)    *x22    *x41    
     5  +coeff( 23)            *x41*x51
     6  +coeff( 24)    *x24            
     7  +coeff( 25)*x11*x22    *x41    
     8  +coeff( 26)        *x32    *x51
      delta_r5p65_484816       =delta_r5p65_484816       
     9  +coeff( 27)*x13                
     1  +coeff( 28)    *x23            
     2  +coeff( 29)*x11*x21    *x41    
     3  +coeff( 30)    *x21*x31*x41    
     4  +coeff( 31)    *x21    *x42    
     5  +coeff( 32)    *x23*x31        
     6  +coeff( 33)    *x22*x32        
     7  +coeff( 34)    *x21*x33        
     8  +coeff( 35)    *x22*x31*x41    
      delta_r5p65_484816       =delta_r5p65_484816       
     9  +coeff( 36)    *x22    *x42    
     1  +coeff( 37)    *x22        *x51
     2  +coeff( 38)    *x21*x31    *x51
     3  +coeff( 39)    *x21    *x41*x51
     4  +coeff( 40)*x13            *x51
     5  +coeff( 41)*x11*x21*x31    *x51
     6  +coeff( 42)    *x22*x31    *x51
     7  +coeff( 43)*x11*x23*x32        
     8  +coeff( 44)*x13    *x33        
      delta_r5p65_484816       =delta_r5p65_484816       
     9  +coeff( 45)*x13    *x31    *x51
     1  +coeff( 46)    *x21*x31    *x52
     2  +coeff( 47)            *x41    
     3  +coeff( 48)*x11    *x31        
     4  +coeff( 49)*x11    *x32        
     5  +coeff( 50)            *x43    
     6  +coeff( 51)*x11            *x51
     7  +coeff( 52)*x11*x21*x32        
     8  +coeff( 53)*x11*x21    *x42    
      delta_r5p65_484816       =delta_r5p65_484816       
     9  +coeff( 54)*x12            *x51
     1  +coeff( 55)*x11    *x31    *x51
     2  +coeff( 56)*x11        *x41*x51
     3  +coeff( 57)        *x31*x41*x51
     4  +coeff( 58)                *x52
     5  +coeff( 59)*x11*x24            
     6  +coeff( 60)    *x24*x31        
     7  +coeff( 61)*x11*x22*x32        
     8  +coeff( 62)    *x23*x32        
      delta_r5p65_484816       =delta_r5p65_484816       
     9  +coeff( 63)    *x23        *x51
     1  +coeff( 64)*x11    *x32    *x51
     2  +coeff( 65)    *x21*x32    *x51
     3  +coeff( 66)        *x33    *x51
     4  +coeff( 67)*x11*x21    *x41*x51
     5  +coeff( 68)        *x31    *x52
     6  +coeff( 69)*x11*x23        *x51
     7  +coeff( 70)    *x22*x32    *x51
     8  +coeff( 71)*x11*x22*x32    *x51
      delta_r5p65_484816       =delta_r5p65_484816       
     9  +coeff( 72)*x12*x21            
     1  +coeff( 73)*x11    *x31*x41    
     2  +coeff( 74)*x11        *x42    
     3  +coeff( 75)*x11*x23            
     4  +coeff( 76)    *x23    *x41    
     5  +coeff( 77)*x11*x21*x31*x41    
     6  +coeff( 78)    *x21*x32*x41    
     7  +coeff( 79)    *x21*x31*x42    
     8  +coeff( 80)    *x21    *x43    
      delta_r5p65_484816       =delta_r5p65_484816       
     9  +coeff( 81)*x11*x23*x31        
     1  +coeff( 82)    *x22*x33        
     2  +coeff( 83)    *x21*x34        
     3  +coeff( 84)    *x24    *x41    
     4  +coeff( 85)*x11*x22*x31*x41    
     5  +coeff( 86)    *x23*x31*x41    
     6  +coeff( 87)        *x34*x41    
     7  +coeff( 88)*x11*x22    *x42    
     8  +coeff( 89)        *x33*x42    
      delta_r5p65_484816       =delta_r5p65_484816       
     9  +coeff( 90)*x11*x22        *x51
     1  +coeff( 91)    *x22    *x41*x51
     2  +coeff( 92)*x11    *x31*x41*x51
     3  +coeff( 93)    *x21*x31*x41*x51
     4  +coeff( 94)        *x32*x41*x51
     5  +coeff( 95)    *x21    *x42*x51
c
      return
      end
      function theta_r5p65_484816       (x,m)
      dimension x(m)
      dimension xmin(10),xmax(10),scale(10),xmean(10)
      dimension coeff( 96)
      data ncoeff/ 95/
      data avdat/ -0.7778706E-03/
      data xmin/
     1 -0.70433E+00,-0.23360E-01,-0.57746E-01,-0.50136E-01,-0.14915E-01,
     2  0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00/
      data xmax/
     1  0.61389E+00, 0.21608E-01, 0.48093E-01, 0.28303E-01, 0.14999E-01,
     2  0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00/
      data scale /10*0./
      data coeff/
     +  0.25241177E-02, 0.13793429E-03,-0.51525462E-01, 0.46156873E-02,
     + -0.39703334E-02, 0.25397910E-01,-0.21916434E-01, 0.46802098E-02,
     +  0.40268693E-02, 0.13844113E-01, 0.60353358E-02,-0.20852935E-01,
     + -0.87612569E-02, 0.77181668E-02,-0.27683722E-02,-0.30280503E-01,
     +  0.63527143E-02, 0.48360050E-01,-0.45767109E-03,-0.38508258E-02,
     +  0.87912101E-02,-0.62278598E-02,-0.16200894E-01, 0.37980401E-02,
     +  0.59447315E-03,-0.48083947E-02, 0.28167977E-02, 0.14243104E-01,
     +  0.32633432E-03, 0.20870247E-02,-0.26503755E-03,-0.39205663E-02,
     +  0.12247455E-02,-0.33935698E-03,-0.23395941E-03,-0.44501005E-03,
     + -0.82049873E-02,-0.26178228E-01, 0.12245174E-01, 0.10199687E-01,
     +  0.36205415E-01, 0.80051302E-03,-0.38630958E-02,-0.23900466E-02,
     + -0.11958378E-01, 0.33632768E-02, 0.15805177E-02,-0.28797116E-02,
     + -0.76299631E-02, 0.21329701E-02, 0.11631800E-03, 0.28195523E-02,
     +  0.13372339E-02,-0.26887790E-02, 0.92103804E-03,-0.42119119E-02,
     + -0.24965620E-02, 0.80403285E-02,-0.14153894E-01,-0.15913537E-01,
     +  0.16237320E-02, 0.86654052E-02,-0.96403435E-02,-0.11851459E-01,
     +  0.78900354E-02,-0.11514806E-02, 0.14687391E-02, 0.95372256E-02,
     + -0.28443255E-02,-0.13570372E-01, 0.21977632E-02, 0.60032918E-02,
     +  0.71681961E-02, 0.29008298E-02,-0.32139840E-02, 0.30155894E-02,
     + -0.40725498E-02,-0.69648551E-03,-0.58199954E-03, 0.38918632E-03,
     +  0.29676934E-02,-0.82304509E-03,-0.60669160E-02,-0.30765933E-03,
     +  0.10251149E-02,-0.19536647E-02, 0.20815758E-02, 0.22553862E-02,
     +  0.15752178E-02,-0.12518307E-02,-0.16445693E-02, 0.42651579E-03,
     +  0.12259084E-02, 0.20618648E-02, 0.18119881E-02,
     +      0.      /
      data ientry/0/
c
      if (ientry.ne.0) go to 10
      ientry=1
      do 5 i=1,m
      if (xmin(i).eq.xmax(i)) go to 5
      scale(i)=2./(xmax(i)-xmin(i))
   5  continue
c
  10  continue
c      normalize variables between -1 and +1
      x1 =1.+(x(  1)-xmax(  1))*scale(  1)
      x2 =1.+(x(  2)-xmax(  2))*scale(  2)
      x3 =1.+(x(  3)-xmax(  3))*scale(  3)
      x4 =1.+(x(  4)-xmax(  4))*scale(  4)
      x5 =1.+(x(  5)-xmax(  5))*scale(  5)
c          set up monomials   functions
      x11 = x1
      x12 = x11*x1
      x13 = x12*x1
      x21 = x2
      x22 = x21*x2
      x23 = x22*x2
      x31 = x3
      x32 = x31*x3
      x33 = x32*x3
      x41 = x4
      x42 = x41*x4
      x43 = x42*x4
      x51 = x5
c
c                  function
c
      theta_r5p65_484816       =avdat
     1  +coeff(  1)                    
     2  +coeff(  2)*x11                
     3  +coeff(  3)    *x21            
     4  +coeff(  4)*x11*x21            
     5  +coeff(  5)    *x22            
     6  +coeff(  6)    *x21*x31        
     7  +coeff(  7)    *x21    *x41    
     8  +coeff(  8)    *x23            
      theta_r5p65_484816       =theta_r5p65_484816       
     9  +coeff(  9)*x11*x21*x31        
     1  +coeff( 10)    *x22*x31        
     2  +coeff( 11)                *x51
     3  +coeff( 12)    *x23*x31        
     4  +coeff( 13)        *x31    *x51
     5  +coeff( 14)            *x41*x51
     6  +coeff( 15)        *x31        
     7  +coeff( 16)    *x21*x32        
     8  +coeff( 17)*x11*x21    *x41    
      theta_r5p65_484816       =theta_r5p65_484816       
     9  +coeff( 18)    *x21*x31*x41    
     1  +coeff( 19)*x11            *x51
     2  +coeff( 20)    *x22        *x51
     3  +coeff( 21)        *x32    *x51
     4  +coeff( 22)    *x22    *x41    
     5  +coeff( 23)    *x21    *x42    
     6  +coeff( 24)            *x43    
     7  +coeff( 25)    *x21        *x51
     8  +coeff( 26)    *x21*x31    *x51
      theta_r5p65_484816       =theta_r5p65_484816       
     9  +coeff( 27)    *x21    *x41*x51
     1  +coeff( 28)    *x22*x31    *x51
     2  +coeff( 29)*x13        *x41*x51
     3  +coeff( 30)            *x41    
     4  +coeff( 31)*x11    *x31        
     5  +coeff( 32)        *x31*x41    
     6  +coeff( 33)            *x42    
     7  +coeff( 34)*x13                
     8  +coeff( 35)*x11*x22            
      theta_r5p65_484816       =theta_r5p65_484816       
     9  +coeff( 36)*x11    *x32        
     1  +coeff( 37)*x11*x21*x32        
     2  +coeff( 38)    *x22*x32        
     3  +coeff( 39)    *x21*x33        
     4  +coeff( 40)*x11*x22    *x41    
     5  +coeff( 41)    *x22*x31*x41    
     6  +coeff( 42)*x12*x23            
     7  +coeff( 43)*x11*x22*x32        
     8  +coeff( 44)*x11        *x41*x51
      theta_r5p65_484816       =theta_r5p65_484816       
     9  +coeff( 45)        *x31*x41*x51
     1  +coeff( 46)            *x42*x51
     2  +coeff( 47)    *x21*x33*x42    
     3  +coeff( 48)        *x33    *x51
     4  +coeff( 49)    *x22    *x41*x51
     5  +coeff( 50)*x11    *x31*x41*x51
     6  +coeff( 51)*x12                
     7  +coeff( 52)        *x32        
     8  +coeff( 53)*x11    *x31*x41    
      theta_r5p65_484816       =theta_r5p65_484816       
     9  +coeff( 54)*x11*x23            
     1  +coeff( 55)*x12*x21*x31        
     2  +coeff( 56)*x11*x22*x31        
     3  +coeff( 57)*x12*x21    *x41    
     4  +coeff( 58)    *x23    *x41    
     5  +coeff( 59)    *x21*x32*x41    
     6  +coeff( 60)    *x22    *x42    
     7  +coeff( 61)*x11    *x31*x42    
     8  +coeff( 62)    *x23*x32        
      theta_r5p65_484816       =theta_r5p65_484816       
     9  +coeff( 63)*x12*x22    *x41    
     1  +coeff( 64)    *x21*x33*x41    
     2  +coeff( 65)    *x21*x32*x42    
     3  +coeff( 66)*x11    *x31    *x51
     4  +coeff( 67)*x11*x22        *x51
     5  +coeff( 68)    *x21*x32    *x51
     6  +coeff( 69)*x11*x21    *x41*x51
     7  +coeff( 70)    *x21*x31*x41*x51
     8  +coeff( 71)        *x32*x41*x51
      theta_r5p65_484816       =theta_r5p65_484816       
     9  +coeff( 72)    *x21    *x42*x51
     1  +coeff( 73)*x12*x22*x33        
     2  +coeff( 74)*x11*x21*x32    *x51
     3  +coeff( 75)    *x22*x32    *x51
     4  +coeff( 76)*x12*x21    *x41*x51
     5  +coeff( 77)*x12*x21*x31*x41*x51
     6  +coeff( 78)*x11        *x41    
     7  +coeff( 79)        *x33        
     8  +coeff( 80)*x12        *x41    
      theta_r5p65_484816       =theta_r5p65_484816       
     9  +coeff( 81)        *x32*x41    
     1  +coeff( 82)*x11        *x42    
     2  +coeff( 83)        *x31*x42    
     3  +coeff( 84)*x13*x21            
     4  +coeff( 85)*x12*x22            
     5  +coeff( 86)*x12    *x32        
     6  +coeff( 87)*x12    *x31*x41    
     7  +coeff( 88)        *x33*x41    
     8  +coeff( 89)*x11*x21    *x42    
      theta_r5p65_484816       =theta_r5p65_484816       
     9  +coeff( 90)        *x32*x42    
     1  +coeff( 91)*x11        *x43    
     2  +coeff( 92)*x13*x22            
     3  +coeff( 93)*x13*x21*x31        
     4  +coeff( 94)*x12*x22*x31        
     5  +coeff( 95)*x11*x23*x31        
c
      return
      end
      function phi_r5p65_484816         (x,m)
      dimension x(m)
      dimension xmin(10),xmax(10),scale(10),xmean(10)
      dimension coeff( 96)
      data ncoeff/ 95/
      data avdat/ -0.1870225E-02/
      data xmin/
     1 -0.70433E+00,-0.23360E-01,-0.57746E-01,-0.50136E-01,-0.14915E-01,
     2  0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00/
      data xmax/
     1  0.61389E+00, 0.21608E-01, 0.48093E-01, 0.28303E-01, 0.14999E-01,
     2  0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00/
      data scale /10*0./
      data coeff/
     +  0.84919692E-03,-0.27809739E-01,-0.18443061E-02,-0.30576757E-02,
     + -0.24502627E-02,-0.88638272E-02,-0.41340599E-02, 0.10588830E-01,
     + -0.14269623E-01,-0.25983728E-02, 0.81519242E-02, 0.15345813E-02,
     +  0.10058488E-02,-0.68555772E-02, 0.16290488E-01,-0.84396629E-02,
     + -0.37611043E-03,-0.36748154E-02,-0.11978300E-02,-0.52012959E-02,
     + -0.98651950E-03, 0.37115815E-02, 0.13919647E-01,-0.18292529E-02,
     + -0.19920887E-02,-0.23058267E-01, 0.63444478E-02, 0.19698586E-01,
     + -0.82487306E-02, 0.48086862E-03, 0.12917386E-01, 0.14432341E-01,
     + -0.12170414E-01, 0.34950287E-02,-0.14875784E-01, 0.12973911E-01,
     + -0.16408607E-02,-0.49662534E-02, 0.14997760E-02, 0.30185128E-01,
     + -0.37802126E-01, 0.10319582E-01,-0.12428092E-01,-0.15499394E-01,
     +  0.18661814E-01, 0.60890033E-02, 0.94729743E-03,-0.64459960E-02,
     +  0.16781107E-01,-0.15271681E-01, 0.42631845E-02,-0.25367835E-02,
     +  0.64784619E-02,-0.59123272E-02, 0.10027043E-01,-0.37475370E-03,
     + -0.24106067E-03,-0.64635336E-04, 0.15261517E-02,-0.16522035E-01,
     +  0.53981080E-03,-0.18044488E-02,-0.98062935E-03,-0.62888931E-02,
     + -0.11183843E-02, 0.78984164E-02, 0.10023492E-01,-0.60508507E-02,
     + -0.25139262E-02, 0.19805857E-02, 0.33026331E-02,-0.35646313E-02,
     +  0.42355759E-02,-0.26810132E-02,-0.77263210E-02, 0.34453801E-02,
     +  0.76737748E-02, 0.15505030E-02, 0.35732149E-02, 0.79464179E-03,
     + -0.19636997E-02,-0.48577082E-02, 0.92279643E-03, 0.62118503E-02,
     + -0.11029952E-02, 0.19035363E-02,-0.56830823E-03,-0.27159925E-02,
     + -0.55618526E-03, 0.39946898E-02,-0.35554916E-02, 0.88097993E-03,
     +  0.28486561E-03,-0.25838113E-02, 0.55767910E-03,
     +      0.      /
      data ientry/0/
c
      if (ientry.ne.0) go to 10
      ientry=1
      do 5 i=1,m
      if (xmin(i).eq.xmax(i)) go to 5
      scale(i)=2./(xmax(i)-xmin(i))
   5  continue
c
  10  continue
c      normalize variables between -1 and +1
      x1 =1.+(x(  1)-xmax(  1))*scale(  1)
      x2 =1.+(x(  2)-xmax(  2))*scale(  2)
      x3 =1.+(x(  3)-xmax(  3))*scale(  3)
      x4 =1.+(x(  4)-xmax(  4))*scale(  4)
      x5 =1.+(x(  5)-xmax(  5))*scale(  5)
c          set up monomials   functions
      x11 = x1
      x12 = x11*x1
      x13 = x12*x1
      x14 = x13*x1
      x21 = x2
      x22 = x21*x2
      x23 = x22*x2
      x24 = x23*x2
      x31 = x3
      x32 = x31*x3
      x33 = x32*x3
      x34 = x33*x3
      x35 = x34*x3
      x41 = x4
      x42 = x41*x4
      x43 = x42*x4
      x51 = x5
c
c                  function
c
      phi_r5p65_484816         =avdat
     1  +coeff(  1)                    
     2  +coeff(  2)        *x31        
     3  +coeff(  3)            *x41    
     4  +coeff(  4)*x11                
     5  +coeff(  5)    *x21            
     6  +coeff(  6)        *x32        
     7  +coeff(  7)            *x42    
     8  +coeff(  8)    *x21*x31        
      phi_r5p65_484816         =phi_r5p65_484816         
     9  +coeff(  9)*x11        *x41    
     1  +coeff( 10)    *x21    *x41    
     2  +coeff( 11)    *x22            
     3  +coeff( 12)*x11        *x42    
     4  +coeff( 13)*x11    *x33        
     5  +coeff( 14)*x11    *x32*x41    
     6  +coeff( 15)*x11    *x31*x42    
     7  +coeff( 16)*x11        *x43    
     8  +coeff( 17)*x13    *x31        
      phi_r5p65_484816         =phi_r5p65_484816         
     9  +coeff( 18)    *x24            
     1  +coeff( 19)*x11    *x35        
     2  +coeff( 20)    *x21        *x51
     3  +coeff( 21)*x13    *x33        
     4  +coeff( 22)    *x23        *x51
     5  +coeff( 23)*x11    *x31        
     6  +coeff( 24)*x12                
     7  +coeff( 25)*x12    *x31        
     8  +coeff( 26)    *x22*x31        
      phi_r5p65_484816         =phi_r5p65_484816         
     9  +coeff( 27)*x12        *x41    
     1  +coeff( 28)    *x22    *x41    
     2  +coeff( 29)*x11*x22    *x41    
     3  +coeff( 30)                *x51
     4  +coeff( 31)    *x24*x31        
     5  +coeff( 32)    *x21*x31    *x51
     6  +coeff( 33)    *x21    *x41*x51
     7  +coeff( 34)*x11*x21    *x41*x51
     8  +coeff( 35)    *x23*x31    *x51
      phi_r5p65_484816         =phi_r5p65_484816         
     9  +coeff( 36)        *x31*x41    
     1  +coeff( 37)*x11    *x32        
     2  +coeff( 38)    *x21*x32        
     3  +coeff( 39)    *x23            
     4  +coeff( 40)    *x22*x32        
     5  +coeff( 41)    *x22*x31*x41    
     6  +coeff( 42)    *x22    *x42    
     7  +coeff( 43)    *x23*x31        
     8  +coeff( 44)    *x21*x32    *x51
      phi_r5p65_484816         =phi_r5p65_484816         
     9  +coeff( 45)    *x21*x31*x41*x51
     1  +coeff( 46)    *x22*x31    *x51
     2  +coeff( 47)    *x24        *x51
     3  +coeff( 48)        *x33        
     4  +coeff( 49)        *x32*x41    
     5  +coeff( 50)        *x31*x42    
     6  +coeff( 51)            *x43    
     7  +coeff( 52)*x11*x21    *x41    
     8  +coeff( 53)    *x23    *x41    
      phi_r5p65_484816         =phi_r5p65_484816         
     9  +coeff( 54)*x11*x21*x33        
     1  +coeff( 55)    *x23*x32        
     2  +coeff( 56)        *x31    *x51
     3  +coeff( 57)            *x41*x51
     4  +coeff( 58)*x11            *x51
     5  +coeff( 59)*x12*x22*x32        
     6  +coeff( 60)    *x24*x32        
     7  +coeff( 61)*x11        *x41*x51
     8  +coeff( 62)    *x22        *x51
      phi_r5p65_484816         =phi_r5p65_484816         
     9  +coeff( 63)*x11    *x31*x41*x51
     1  +coeff( 64)    *x21    *x42*x51
     2  +coeff( 65)*x12    *x32    *x51
     3  +coeff( 66)    *x23    *x41*x51
     4  +coeff( 67)    *x23*x32    *x51
     5  +coeff( 68)    *x24*x32    *x51
     6  +coeff( 69)*x11    *x31*x41    
     7  +coeff( 70)    *x21*x31*x41    
     8  +coeff( 71)*x11*x21*x31        
      phi_r5p65_484816         =phi_r5p65_484816         
     9  +coeff( 72)    *x21*x33        
     1  +coeff( 73)    *x21*x32*x41    
     2  +coeff( 74)*x12    *x33        
     3  +coeff( 75)    *x22*x33        
     4  +coeff( 76)*x11*x21*x32*x41    
     5  +coeff( 77)    *x22*x32*x41    
     6  +coeff( 78)*x12    *x31*x42    
     7  +coeff( 79)*x11*x22*x32        
     8  +coeff( 80)*x14    *x31        
      phi_r5p65_484816         =phi_r5p65_484816         
     9  +coeff( 81)*x11*x23    *x41    
     1  +coeff( 82)    *x24    *x41    
     2  +coeff( 83)*x12    *x34        
     3  +coeff( 84)    *x24*x31*x41    
     4  +coeff( 85)        *x32    *x51
     5  +coeff( 86)        *x31*x41*x51
     6  +coeff( 87)*x11*x21        *x51
     7  +coeff( 88)    *x23*x32*x42    
     8  +coeff( 89)        *x33    *x51
      phi_r5p65_484816         =phi_r5p65_484816         
     9  +coeff( 90)        *x32*x41*x51
     1  +coeff( 91)        *x31*x42*x51
     2  +coeff( 92)*x11*x21*x31    *x51
     3  +coeff( 93)*x12        *x41*x51
     4  +coeff( 94)    *x22    *x41*x51
     5  +coeff( 95)*x13*x24            
c
      return
      end
      function y00_r5p65_484816         (x,m)
      dimension x(m)
      dimension xmin(10),xmax(10),scale(10),xmean(10)
      dimension coeff( 96)
      data ncoeff/ 95/
      data avdat/ -0.4779269E-03/
      data xmin/
     1 -0.70433E+00,-0.23360E-01,-0.57746E-01,-0.50136E-01,-0.14915E-01,
     2  0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00/
      data xmax/
     1  0.61389E+00, 0.21608E-01, 0.48093E-01, 0.28303E-01, 0.14999E-01,
     2  0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00, 0.00000E+00/
      data scale /10*0./
      data coeff/
     + -0.69011520E-02,-0.44329368E-01, 0.72715506E-01, 0.93952799E-02,
     +  0.11866503E-01,-0.17453624E-01,-0.38557250E-01,-0.42128567E-01,
     +  0.98380586E-02, 0.16626133E-01, 0.25956379E-02, 0.29194073E-02,
     + -0.13043907E-01,-0.29678700E-01,-0.36887135E-02, 0.17618010E-01,
     +  0.30799382E-02, 0.92065800E-03, 0.40814355E-01,-0.89752097E-02,
     + -0.89230537E-02,-0.20289814E-01,-0.87074493E-03,-0.12447690E-01,
     +  0.69084265E-02, 0.18750403E-03,-0.10399573E-01, 0.16668200E-01,
     + -0.15452323E-01, 0.11943275E-01, 0.11180365E-02, 0.10627424E-02,
     +  0.24212871E-01,-0.70458181E-01, 0.78049339E-01,-0.27433917E-03,
     +  0.79167802E-02,-0.77146138E-02, 0.16780006E-02,-0.27391549E-01,
     + -0.55414918E-02,-0.22816996E-02, 0.15030220E-01,-0.50631701E-03,
     +  0.15678201E-01,-0.70824083E-02,-0.14421401E-02, 0.67762113E-02,
     +  0.55833894E-03, 0.17013855E-02, 0.10966729E-01, 0.46461500E-03,
     +  0.27603203E-01,-0.72520554E-01, 0.88215563E-02, 0.43366986E-03,
     +  0.69755618E-03,-0.91707725E-02, 0.11323648E-01,-0.23804829E-01,
     +  0.31380769E-01,-0.21352812E-03, 0.63950000E-02, 0.41087680E-02,
     + -0.28752931E-02,-0.51459629E-04,-0.16313357E-02,-0.11965697E-01,
     + -0.94250566E-03, 0.25185936E-02,-0.38409771E-02, 0.25820704E-02,
     +  0.38548319E-02,-0.87865898E-04,-0.21502325E-01, 0.77635706E-02,
     +  0.27006548E-02, 0.48501398E-01,-0.14991614E-01, 0.76746875E-02,
     + -0.29265273E-02, 0.12197330E-02, 0.43880823E-03,-0.68856338E-02,
     +  0.27416565E-04,-0.69531042E-03, 0.51244366E-03,-0.13914304E-02,
     +  0.42571500E-02,-0.49056404E-03,-0.18980999E-03, 0.23543795E-02,
     + -0.34124863E-02, 0.41042506E-02,-0.28288395E-02,
     +      0.      /
      data ientry/0/
c
      if (ientry.ne.0) go to 10
      ientry=1
      do 5 i=1,m
      if (xmin(i).eq.xmax(i)) go to 5
      scale(i)=2./(xmax(i)-xmin(i))
   5  continue
c
  10  continue
c      normalize variables between -1 and +1
      x1 =1.+(x(  1)-xmax(  1))*scale(  1)
      x2 =1.+(x(  2)-xmax(  2))*scale(  2)
      x3 =1.+(x(  3)-xmax(  3))*scale(  3)
      x4 =1.+(x(  4)-xmax(  4))*scale(  4)
      x5 =1.+(x(  5)-xmax(  5))*scale(  5)
c          set up monomials   functions
      x11 = x1
      x12 = x11*x1
      x21 = x2
      x22 = x21*x2
      x31 = x3
      x32 = x31*x3
      x33 = x32*x3
      x41 = x4
      x42 = x41*x4
      x43 = x42*x4
      x51 = x5
c
c                  function
c
      y00_r5p65_484816         =avdat
     1  +coeff(  1)                    
     2  +coeff(  2)        *x31        
     3  +coeff(  3)            *x41    
     4  +coeff(  4)*x11                
     5  +coeff(  5)        *x32        
     6  +coeff(  6)        *x31*x41    
     7  +coeff(  7)*x11    *x31        
     8  +coeff(  8)    *x21*x31        
      y00_r5p65_484816         =y00_r5p65_484816         
     9  +coeff(  9)*x11        *x41    
     1  +coeff( 10)    *x21    *x41    
     2  +coeff( 11)*x12                
     3  +coeff( 12)*x11*x21            
     4  +coeff( 13)    *x22            
     5  +coeff( 14)            *x43    
     6  +coeff( 15)*x11    *x32        
     7  +coeff( 16)*x11    *x31*x41    
     8  +coeff( 17)*x12    *x31        
      y00_r5p65_484816         =y00_r5p65_484816         
     9  +coeff( 18)*x11*x21*x31        
     1  +coeff( 19)    *x22*x31        
     2  +coeff( 20)*x12        *x41    
     3  +coeff( 21)*x11*x21    *x41    
     4  +coeff( 22)    *x22    *x41    
     5  +coeff( 23)        *x31    *x51
     6  +coeff( 24)*x11    *x31*x42    
     7  +coeff( 25)    *x21        *x51
     8  +coeff( 26)        *x33*x42    
      y00_r5p65_484816         =y00_r5p65_484816         
     9  +coeff( 27)*x11*x22*x31        
     1  +coeff( 28)*x11*x22    *x41    
     2  +coeff( 29)    *x21*x31    *x51
     3  +coeff( 30)    *x21    *x41*x51
     4  +coeff( 31)*x11*x21*x31    *x51
     5  +coeff( 32)    *x21            
     6  +coeff( 33)        *x33        
     7  +coeff( 34)        *x32*x41    
     8  +coeff( 35)        *x31*x42    
      y00_r5p65_484816         =y00_r5p65_484816         
     9  +coeff( 36)                *x51
     1  +coeff( 37)    *x21*x32        
     2  +coeff( 38)*x11        *x42    
     3  +coeff( 39)*x11*x22            
     4  +coeff( 40)    *x22*x32        
     5  +coeff( 41)*x12        *x42    
     6  +coeff( 42)        *x31*x41*x51
     7  +coeff( 43)    *x22*x33        
     8  +coeff( 44)*x11*x21        *x51
      y00_r5p65_484816         =y00_r5p65_484816         
     9  +coeff( 45)    *x21*x32    *x51
     1  +coeff( 46)*x11*x21    *x41*x51
     2  +coeff( 47)    *x22*x32    *x51
     3  +coeff( 48)            *x42    
     4  +coeff( 49)    *x21*x31*x41    
     5  +coeff( 50)    *x21    *x42    
     6  +coeff( 51)        *x33*x41    
     7  +coeff( 52)            *x41*x51
     8  +coeff( 53)    *x21*x33        
      y00_r5p65_484816         =y00_r5p65_484816         
     9  +coeff( 54)    *x21*x32*x41    
     1  +coeff( 55)*x11        *x43    
     2  +coeff( 56)*x11            *x51
     3  +coeff( 57)*x12    *x32        
     4  +coeff( 58)*x11*x21*x32        
     5  +coeff( 59)    *x22*x31*x41    
     6  +coeff( 60)    *x21*x33*x41    
     7  +coeff( 61)    *x21*x32*x42    
     8  +coeff( 62)*x11    *x31*x43    
      y00_r5p65_484816         =y00_r5p65_484816         
     9  +coeff( 63)*x11*x21*x33        
     1  +coeff( 64)    *x22*x32*x41    
     2  +coeff( 65)    *x22*x31*x42    
     3  +coeff( 66)*x12            *x51
     4  +coeff( 67)        *x33    *x51
     5  +coeff( 68)    *x21*x31*x41*x51
     6  +coeff( 69)*x12    *x31    *x51
     7  +coeff( 70)    *x22*x31    *x51
     8  +coeff( 71)    *x21*x33    *x51
      y00_r5p65_484816         =y00_r5p65_484816         
     9  +coeff( 72)*x12    *x32    *x51
     1  +coeff( 73)*x11*x21*x32    *x51
     2  +coeff( 74)        *x32*x43*x51
     3  +coeff( 75)        *x32*x42    
     4  +coeff( 76)        *x31*x43    
     5  +coeff( 77)*x11    *x33        
     6  +coeff( 78)    *x21*x31*x42    
     7  +coeff( 79)    *x21    *x43    
     8  +coeff( 80)*x11*x21*x31*x41    
      y00_r5p65_484816         =y00_r5p65_484816         
     9  +coeff( 81)*x11*x21    *x42    
     1  +coeff( 82)        *x32    *x51
     2  +coeff( 83)*x12*x21    *x41    
     3  +coeff( 84)    *x21*x31*x43    
     4  +coeff( 85)*x11    *x31    *x51
     5  +coeff( 86)*x11        *x41*x51
     6  +coeff( 87)*x12    *x33        
     7  +coeff( 88)*x12    *x31*x42    
     8  +coeff( 89)*x12        *x43    
      y00_r5p65_484816         =y00_r5p65_484816         
     9  +coeff( 90)    *x22        *x51
     1  +coeff( 91)        *x31*x42*x51
     2  +coeff( 92)            *x43*x51
     3  +coeff( 93)*x11*x22*x31*x41    
     4  +coeff( 94)    *x21*x33*x42    
     5  +coeff( 95)*x11    *x32*x43    
c
      return
      end
